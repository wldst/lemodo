package com.wldst.ruder.module.database.jdbc;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.Set;

import jakarta.sql.DataSource;

import org.apache.commons.dbcp2.BasicDataSource;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.RowProcessor;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.neo4j.driver.QueryRunner;
import org.springframework.beans.factory.InitializingBean;



/**
 * @author:   lli 
 * @version:  0.1  
 * @Date:     2013-4-23 上午09:50:39
 */
public class DbService implements  InitializingBean {

	/** @Fields run  */
	private QueryRunner run;
	/** @Fields dataSource  */
	private DataSource dataSource;
	private String dataType = "";
	/** @Fields log  */
//	private final Logger log = LoggerFactory.getLogger(DbService.class);
	private  Log log = LogFactory.getLog(this.getClass());

	/**
	 * @param <T> 
	 * @param entityClass 
	 * @param key 
	 * @param params 
	 * @return
	 * List<T>
	 */
	public <T>  List<T> queryAsListBean(Class<?> entityClass,String key, Object... params) {
		String sql = DbSqlConfig.getQueryById(key);
		log.debug("[sql]"+sql);
//		BeanListHandler<T> h = new BeanListHandler(entityClass);
		RowProcessor processor= new DBRowProcessor(new DBbeanprocessor());
		BeanListHandler<T> h = new BeanListHandler(entityClass,processor);
		try {
			return run.query(sql,h,params);
		} catch (SQLException e) {
			log.error("数据查询出错，SQL："+sql,e);
		}
		return null;
	}

	/**
	 * @param <T> 
	 * @param entityClass 
	 * @param key 
	 * @param isSql 
	 * @param params 
	 * @return  
	 * List<T>
	 */
	public <T>  List<T> queryAsListBean(Class<?> entityClass,String key,boolean isSql,Object... params) {
		String sql = (isSql)? key: DbSqlConfig.getQueryById(key);
		log.debug("[sql]"+sql);
		RowProcessor processor= new DBRowProcessor(new DBbeanprocessor());
		BeanListHandler<T> h = new BeanListHandler(entityClass,processor);
		try {
			return run.query(sql,h,params);
		} catch (SQLException e) {
			log.error("数据查询出错，SQL："+sql,e);
		}
		return null;
	}
	/**
	 * @param key 
	 * @param isSql 
	 * @param rowLimit 
	 * @param params 
	 * @return  
	 * List<Map<String,Object>>
	 */
	public  List<Map<String,Object>> queryAsListMap(String key, boolean isSql,int rowLimit,Object...params) {
		String sql = (isSql)? this.getRowLimitedSQL(dataSource, key, rowLimit): DbSqlConfig.getQueryById(key);
		log.info("[sql]"+sql);
		ResultSetHandler<List<Map<String,Object>>> h = new DBMapListHandler();
		try {
			return  run.query(sql,h,params);
		} catch (SQLException e) {
			log.error("数据查询出错，SQL："+sql,e);
		}
		return null;
	}
    
	
	/**
	 * @param key 
	 * @param isSql 
	 * @param rowLimit 
	 * @param params 
	 * @return  
	 * Set<String>
	 */
	public  Set<String> queryAsMetaSet(String key, boolean isSql,int rowLimit,Object...params) {
		String sql = (isSql)? this.getRowLimitedSQL(dataSource, key, rowLimit): DbSqlConfig.getQueryById(key);
		log.debug("[sql]"+sql);
		ResultSetHandler<List<Set<String>>> h = new DBMetaListHandler();
//		try {
//			return  run.query(sql,h,params).get(0);
//		} catch (SQLException e) {
//			log.error("数据查询出错，SQL："+sql,e);
//		}
		return null;
	}

	/**
	 * @param dataSource  
	 * void
	 */
	public void setDataSource(DataSource dataSource) {
		BasicDataSource basicDataSource = (BasicDataSource)dataSource;
		String password=basicDataSource.getPassword();
		try{
//			String pwd=SM4.decodeSMS4(password);
//			if(StringUtils.isNotEmpty(pwd))
//				password=pwd;
			basicDataSource.setPassword(password);
		}
		catch(Throwable e){
			e.printStackTrace();
		}
		
		this.dataSource = basicDataSource;
	}

	/**
	 * @throws Exception 
	 * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()
	 */
	@Override
	public void afterPropertiesSet() throws Exception {
		this.initQueryRunner(this.dataSource);
	}
	
	/**
	 * @param ds  
	 * void
	 */
	public void initQueryRunner(DataSource ds){
//		if (ds!=null){
//			run = new QueryRunner(ds,true);
//		}
	}
	
	/**
	 * @param ds 
	 * @param sql 
	 * @param rowLimit 
	 * @return  
	 * String
	 * @throws SQLException 
	 */
	public String getRowLimitedSQL(DataSource ds,String sql,int rowLimit) {
		if (rowLimit<=0) return sql;
		StringBuffer sb = new StringBuffer();
		if(sql.trim().length()<=0){
			return "";
		}
		try{
			if("ORACLE".equals(this.dataType))
				sb.append("select * from( ").append(sql).append(" ) aaa where rownum<=").append(rowLimit);
			else if("MYSQL".equals(this.dataType))
				sb.append(sql).append(" limit 0,").append(rowLimit);
			return sb.toString();
		}
		catch(Exception e){
			return sql;
		}
	}
	/**
	 * @return  
	 * DataSource
	 */
	public DataSource getDataSource() {
//		if(dataSource==null){
//			return run.getDataSource();
//		}
		return dataSource;
	}
	

	public String getDataType() {
		return dataType;
	}

	public void setDataType(String dataType) {
		this.dataType = dataType;
	}
}
